// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel simpleBoids
#define GROUP_SIZE 256

#include "UnityCG.cginc"

float hash( float n )
{
	return frac(sin(n)*43758.5453);
}

// The noise function returns a value in the range -1.0f -> 1.0f
float noise1( float3 x )
{
	float3 p = floor(x);
	float3 f = frac(x);

	f       = f*f*(3.0-2.0*f);
	float n = p.x + p.y*57.0 + 113.0*p.z;

	return lerp(lerp(lerp( hash(n+0.0), hash(n+1.0),f.x),
					lerp( hash(n+57.0), hash(n+58.0),f.x),f.y),
				lerp(lerp( hash(n+113.0), hash(n+114.0),f.x),
					lerp( hash(n+170.0), hash(n+171.0),f.x),f.y),f.z);
}

struct Boid{
    float3 position;
    float3 direction;
    float noise_offset;
};
// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWStructuredBuffer<Boid> boidBuffer;

CBUFFER_START(Params)
    float NeighbourDistance;
    int BoidsCount;
CBUFFER_END

[numthreads(GROUP_SIZE,1,1)]
void simpleBoids (uint3 id : SV_DispatchThreadID)
{
    // TODO: insert actual code here!
    Boid boid = boidBuffer[id.x];
    float3 align = boid.direction;
    float3 cohe = boid.position;
    float3 sepration = (0.0, 0.0, 0.0);

    for(int i = 0; i < BoidsCount; i++){
        if(i != int(id.x)){
            Boid temp = boidBuffer[i];
            float dis = distance(temp.position, boid.position);
            if(dis < NeighbourDistance){

            }
        }
    }

    boid.position = float3(0.0, id.x, 0.0);
    boid.direction = normalize(float3(0.0, id.x, 0.0));
    boid.noise_offset = id.x;
    boidBuffer[id.x] = boid;
    //Result[id.xy] = float4(id.x & id.y, (id.x & 15)/15.0, (id.y & 15)/15.0, 0.0);
    //Result[id.x] = float3(id.x * id.x, 0, 0);
}
